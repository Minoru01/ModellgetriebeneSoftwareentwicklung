/*
 * generated by Xtext 2.21.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SelfieGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Model");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//Model:
		//	expressions+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0() { return cExpressionsExpressionParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	Declaration | Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | Assignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDefKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_0_1_0 = (RuleCall)cVariableAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValuableAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValuableValuableParserRuleCall_0_3_0 = (RuleCall)cValuableAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCalculationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Declaration:
		//	'def' variable=Variable ':' valuable=Valuable | Calculation ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' variable=Variable ':' valuable=Valuable | Calculation ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'def' variable=Variable ':' valuable=Valuable
		public Group getGroup_0() { return cGroup_0; }
		
		//'def'
		public Keyword getDefKeyword_0_0() { return cDefKeyword_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_1_0() { return cVariableVariableParserRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//valuable=Valuable
		public Assignment getValuableAssignment_0_3() { return cValuableAssignment_0_3; }
		
		//Valuable
		public RuleCall getValuableValuableParserRuleCall_0_3_0() { return cValuableValuableParserRuleCall_0_3_0; }
		
		//Calculation ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//Calculation
		public RuleCall getCalculationParserRuleCall_1_0() { return cCalculationParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValuableAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValuableValuableParserRuleCall_0_2_0 = (RuleCall)cValuableAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCalculationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Assignment:
		//	variable=Variable ':=' valuable=Valuable | Calculation ';';
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable ':=' valuable=Valuable | Calculation ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=Variable ':=' valuable=Valuable
		public Group getGroup_0() { return cGroup_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_0() { return cVariableVariableParserRuleCall_0_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//valuable=Valuable
		public Assignment getValuableAssignment_0_2() { return cValuableAssignment_0_2; }
		
		//Valuable
		public RuleCall getValuableValuableParserRuleCall_0_2_0() { return cValuableValuableParserRuleCall_0_2_0; }
		
		//Calculation ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//Calculation
		public RuleCall getCalculationParserRuleCall_1_0() { return cCalculationParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class ValuableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Valuable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Valuable:
		//	Literal | VariableRef;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | VariableRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_1() { return cVariableRefParserRuleCall_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//	INTEGER | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGER | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_0() { return cINTEGERTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.VariableRef");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//VariableRef:
		//	variable=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0() { return cVariableVariableParserRuleCall_0; }
	}
	public class CalculationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Calculation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftValuableParserRuleCall_0_0_0 = (RuleCall)cLeftAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightValuableParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Action cCalculationLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cOperatorAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_2_0_0 = (RuleCall)cOperatorAssignment_1_2_0.eContents().get(0);
		private final Assignment cRightAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRightValuableParserRuleCall_1_2_1_0 = (RuleCall)cRightAssignment_1_2_1.eContents().get(0);
		
		//Calculation Valuable:
		//	left=Valuable operator=Operator right=Valuable | ParenthesizedExpression {Calculation.left=current}
		//	(operator=Operator right=Valuable)?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Valuable operator=Operator right=Valuable | ParenthesizedExpression {Calculation.left=current} (operator=Operator
		//right=Valuable)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left=Valuable operator=Operator right=Valuable
		public Group getGroup_0() { return cGroup_0; }
		
		//left=Valuable
		public Assignment getLeftAssignment_0_0() { return cLeftAssignment_0_0; }
		
		//Valuable
		public RuleCall getLeftValuableParserRuleCall_0_0_0() { return cLeftValuableParserRuleCall_0_0_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_0_1_0() { return cOperatorOperatorEnumRuleCall_0_1_0; }
		
		//right=Valuable
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }
		
		//Valuable
		public RuleCall getRightValuableParserRuleCall_0_2_0() { return cRightValuableParserRuleCall_0_2_0; }
		
		//ParenthesizedExpression {Calculation.left=current} (operator=Operator right=Valuable)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_1_0() { return cParenthesizedExpressionParserRuleCall_1_0; }
		
		//{Calculation.left=current}
		public Action getCalculationLeftAction_1_1() { return cCalculationLeftAction_1_1; }
		
		//(operator=Operator right=Valuable)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1_2_0() { return cOperatorAssignment_1_2_0; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_2_0_0() { return cOperatorOperatorEnumRuleCall_1_2_0_0; }
		
		//right=Valuable
		public Assignment getRightAssignment_1_2_1() { return cRightAssignment_1_2_1; }
		
		//Valuable
		public RuleCall getRightValuableParserRuleCall_1_2_1_0() { return cRightValuableParserRuleCall_1_2_1_0; }
	}
	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCalculationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression Valuable:
		//	'(' Calculation ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Calculation ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Calculation
		public RuleCall getCalculationParserRuleCall_1() { return cCalculationParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTIMESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTIMESAsteriskKeyword_2_0 = (Keyword)cTIMESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVIDEDSolidusKeyword_3_0 = (Keyword)cDIVIDEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Operator:
		//	PLUS='+' | MINUS='-' | TIMES='*' | DIVIDED='/';
		public EnumRule getRule() { return rule; }
		
		//PLUS='+' | MINUS='-' | TIMES='*' | DIVIDED='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
		
		//TIMES='*'
		public EnumLiteralDeclaration getTIMESEnumLiteralDeclaration_2() { return cTIMESEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getTIMESAsteriskKeyword_2_0() { return cTIMESAsteriskKeyword_2_0; }
		
		//DIVIDED='/'
		public EnumLiteralDeclaration getDIVIDEDEnumLiteralDeclaration_3() { return cDIVIDEDEnumLiteralDeclaration_3; }
		
		//'/'
		public Keyword getDIVIDEDSolidusKeyword_3_0() { return cDIVIDEDSolidusKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final ExpressionElements pExpression;
	private final DeclarationElements pDeclaration;
	private final AssignmentElements pAssignment;
	private final ValuableElements pValuable;
	private final LiteralElements pLiteral;
	private final TerminalRule tINTEGER;
	private final TerminalRule tDOUBLE;
	private final VariableElements pVariable;
	private final VariableRefElements pVariableRef;
	private final OperatorElements eOperator;
	private final CalculationElements pCalculation;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SelfieGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pExpression = new ExpressionElements();
		this.pDeclaration = new DeclarationElements();
		this.pAssignment = new AssignmentElements();
		this.pValuable = new ValuableElements();
		this.pLiteral = new LiteralElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.INTEGER");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Selfie.DOUBLE");
		this.pVariable = new VariableElements();
		this.pVariableRef = new VariableRefElements();
		this.eOperator = new OperatorElements();
		this.pCalculation = new CalculationElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Selfie".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	expressions+=Expression*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Expression:
	//	Declaration | Assignment;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Declaration:
	//	'def' variable=Variable ':' valuable=Valuable | Calculation ';';
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Assignment:
	//	variable=Variable ':=' valuable=Valuable | Calculation ';';
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Valuable:
	//	Literal | VariableRef;
	public ValuableElements getValuableAccess() {
		return pValuable;
	}
	
	public ParserRule getValuableRule() {
		return getValuableAccess().getRule();
	}
	
	//Literal:
	//	INTEGER | DOUBLE;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//terminal INTEGER returns ecore::EInt:
	//	'-'? '0'..'9'+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	'-'? '0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VariableRef:
	//	variable=Variable;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//enum Operator:
	//	PLUS='+' | MINUS='-' | TIMES='*' | DIVIDED='/';
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Calculation Valuable:
	//	left=Valuable operator=Operator right=Valuable | ParenthesizedExpression {Calculation.left=current}
	//	(operator=Operator right=Valuable)?;
	public CalculationElements getCalculationAccess() {
		return pCalculation;
	}
	
	public ParserRule getCalculationRule() {
		return getCalculationAccess().getRule();
	}
	
	//ParenthesizedExpression Valuable:
	//	'(' Calculation ')';
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
