/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalZustandsdiagrammParser;
import org.xtext.example.mydsl.services.ZustandsdiagrammGrammarAccess;

public class ZustandsdiagrammParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ZustandsdiagrammGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ZustandsdiagrammGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInitialStateAccess().getGroup(), "rule__InitialState__Group__0");
			builder.put(grammarAccess.getFinalStateAccess().getGroup(), "rule__FinalState__Group__0");
			builder.put(grammarAccess.getGenericStateAccess().getGroup(), "rule__GenericState__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup_1(), "rule__Event__Group_1__0");
			builder.put(grammarAccess.getGuardAccess().getGroup(), "rule__Guard__Group__0");
			builder.put(grammarAccess.getModelAccess().getInitialStateAssignment_0(), "rule__Model__InitialStateAssignment_0");
			builder.put(grammarAccess.getModelAccess().getFinalStateAssignment_1(), "rule__Model__FinalStateAssignment_1");
			builder.put(grammarAccess.getModelAccess().getGenericStateAssignment_2(), "rule__Model__GenericStateAssignment_2");
			builder.put(grammarAccess.getTargetableStateAccess().getNameAssignment(), "rule__TargetableState__NameAssignment");
			builder.put(grammarAccess.getInitialStateAccess().getNameAssignment_2(), "rule__InitialState__NameAssignment_2");
			builder.put(grammarAccess.getInitialStateAccess().getTransitionAssignment_4(), "rule__InitialState__TransitionAssignment_4");
			builder.put(grammarAccess.getFinalStateAccess().getNameAssignment_2(), "rule__FinalState__NameAssignment_2");
			builder.put(grammarAccess.getGenericStateAccess().getNameAssignment_2(), "rule__GenericState__NameAssignment_2");
			builder.put(grammarAccess.getGenericStateAccess().getTransitionsAssignment_4(), "rule__GenericState__TransitionsAssignment_4");
			builder.put(grammarAccess.getTransitionAccess().getEventAssignment_2(), "rule__Transition__EventAssignment_2");
			builder.put(grammarAccess.getTransitionAccess().getToAssignment_4(), "rule__Transition__ToAssignment_4");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_0(), "rule__Event__NameAssignment_0");
			builder.put(grammarAccess.getEventAccess().getGuardAssignment_1_1(), "rule__Event__GuardAssignment_1_1");
			builder.put(grammarAccess.getGuardAccess().getNameAssignment_2(), "rule__Guard__NameAssignment_2");
			builder.put(grammarAccess.getModelAccess().getUnorderedGroup(), "rule__Model__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ZustandsdiagrammGrammarAccess grammarAccess;

	@Override
	protected InternalZustandsdiagrammParser createParser() {
		InternalZustandsdiagrammParser result = new InternalZustandsdiagrammParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ZustandsdiagrammGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ZustandsdiagrammGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
