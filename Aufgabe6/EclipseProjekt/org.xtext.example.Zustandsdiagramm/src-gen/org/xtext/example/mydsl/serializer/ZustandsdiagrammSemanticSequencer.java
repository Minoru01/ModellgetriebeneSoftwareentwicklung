/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.ZustandsdiagrammGrammarAccess;
import org.xtext.example.mydsl.zustandsdiagramm.Event;
import org.xtext.example.mydsl.zustandsdiagramm.FinalState;
import org.xtext.example.mydsl.zustandsdiagramm.GenericState;
import org.xtext.example.mydsl.zustandsdiagramm.Guard;
import org.xtext.example.mydsl.zustandsdiagramm.InitialState;
import org.xtext.example.mydsl.zustandsdiagramm.Model;
import org.xtext.example.mydsl.zustandsdiagramm.TargetableState;
import org.xtext.example.mydsl.zustandsdiagramm.Transition;
import org.xtext.example.mydsl.zustandsdiagramm.ZustandsdiagrammPackage;

@SuppressWarnings("all")
public class ZustandsdiagrammSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ZustandsdiagrammGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ZustandsdiagrammPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ZustandsdiagrammPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case ZustandsdiagrammPackage.FINAL_STATE:
				sequence_FinalState(context, (FinalState) semanticObject); 
				return; 
			case ZustandsdiagrammPackage.GENERIC_STATE:
				sequence_GenericState(context, (GenericState) semanticObject); 
				return; 
			case ZustandsdiagrammPackage.GUARD:
				sequence_Guard(context, (Guard) semanticObject); 
				return; 
			case ZustandsdiagrammPackage.INITIAL_STATE:
				sequence_InitialState(context, (InitialState) semanticObject); 
				return; 
			case ZustandsdiagrammPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ZustandsdiagrammPackage.TARGETABLE_STATE:
				sequence_TargetableState(context, (TargetableState) semanticObject); 
				return; 
			case ZustandsdiagrammPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=ID guard=Guard?)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FinalState returns FinalState
	 *
	 * Constraint:
	 *     name=TargetableState
	 */
	protected void sequence_FinalState(ISerializationContext context, FinalState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ZustandsdiagrammPackage.Literals.FINAL_STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ZustandsdiagrammPackage.Literals.FINAL_STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFinalStateAccess().getNameTargetableStateParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GenericState returns GenericState
	 *
	 * Constraint:
	 *     (name=TargetableState transitions+=Transition+)
	 */
	protected void sequence_GenericState(ISerializationContext context, GenericState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Guard returns Guard
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Guard(ISerializationContext context, Guard semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ZustandsdiagrammPackage.Literals.GUARD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ZustandsdiagrammPackage.Literals.GUARD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitialState returns InitialState
	 *
	 * Constraint:
	 *     (name=ID transition=Transition)
	 */
	protected void sequence_InitialState(ISerializationContext context, InitialState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ZustandsdiagrammPackage.Literals.INITIAL_STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ZustandsdiagrammPackage.Literals.INITIAL_STATE__NAME));
			if (transientValues.isValueTransient(semanticObject, ZustandsdiagrammPackage.Literals.INITIAL_STATE__TRANSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ZustandsdiagrammPackage.Literals.INITIAL_STATE__TRANSITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialStateAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInitialStateAccess().getTransitionTransitionParserRuleCall_4_0(), semanticObject.getTransition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (initialState+=InitialState | finalState+=FinalState | genericState+=GenericState)+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetableState returns TargetableState
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TargetableState(ISerializationContext context, TargetableState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ZustandsdiagrammPackage.Literals.TARGETABLE_STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ZustandsdiagrammPackage.Literals.TARGETABLE_STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTargetableStateAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (event=Event to=[TargetableState|ID])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ZustandsdiagrammPackage.Literals.TRANSITION__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ZustandsdiagrammPackage.Literals.TRANSITION__EVENT));
			if (transientValues.isValueTransient(semanticObject, ZustandsdiagrammPackage.Literals.TRANSITION__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ZustandsdiagrammPackage.Literals.TRANSITION__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getEventEventParserRuleCall_2_0(), semanticObject.getEvent());
		feeder.accept(grammarAccess.getTransitionAccess().getToTargetableStateIDTerminalRuleCall_4_0_1(), semanticObject.eGet(ZustandsdiagrammPackage.Literals.TRANSITION__TO, false));
		feeder.finish();
	}
	
	
}
