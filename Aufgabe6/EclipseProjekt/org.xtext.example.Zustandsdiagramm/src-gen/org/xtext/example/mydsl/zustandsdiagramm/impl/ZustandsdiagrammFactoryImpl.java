/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.zustandsdiagramm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.zustandsdiagramm.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ZustandsdiagrammFactoryImpl extends EFactoryImpl implements ZustandsdiagrammFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ZustandsdiagrammFactory init()
  {
    try
    {
      ZustandsdiagrammFactory theZustandsdiagrammFactory = (ZustandsdiagrammFactory)EPackage.Registry.INSTANCE.getEFactory(ZustandsdiagrammPackage.eNS_URI);
      if (theZustandsdiagrammFactory != null)
      {
        return theZustandsdiagrammFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ZustandsdiagrammFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ZustandsdiagrammFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ZustandsdiagrammPackage.MODEL: return createModel();
      case ZustandsdiagrammPackage.TARGETABLE_STATE: return createTargetableState();
      case ZustandsdiagrammPackage.INITIAL_STATE: return createInitialState();
      case ZustandsdiagrammPackage.FINAL_STATE: return createFinalState();
      case ZustandsdiagrammPackage.GENERIC_STATE: return createGenericState();
      case ZustandsdiagrammPackage.TRANSITION: return createTransition();
      case ZustandsdiagrammPackage.EVENT: return createEvent();
      case ZustandsdiagrammPackage.GUARD: return createGuard();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TargetableState createTargetableState()
  {
    TargetableStateImpl targetableState = new TargetableStateImpl();
    return targetableState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialState createInitialState()
  {
    InitialStateImpl initialState = new InitialStateImpl();
    return initialState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FinalState createFinalState()
  {
    FinalStateImpl finalState = new FinalStateImpl();
    return finalState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenericState createGenericState()
  {
    GenericStateImpl genericState = new GenericStateImpl();
    return genericState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Guard createGuard()
  {
    GuardImpl guard = new GuardImpl();
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ZustandsdiagrammPackage getZustandsdiagrammPackage()
  {
    return (ZustandsdiagrammPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ZustandsdiagrammPackage getPackage()
  {
    return ZustandsdiagrammPackage.eINSTANCE;
  }

} //ZustandsdiagrammFactoryImpl
